<h1>CPAN Testers Matrix: [% dist_name %]</h1>

<small>You can click on the matrix cells or row/column headers to get the list of corresponding reports</small>
<div id="myChart" style="height: 385px; width: 768px"></div>
<script>
let maxShowColumns = 1;
$(() => {
  $.when(
    $.getJSON('/api/dist/[% dist_name %]')
  ).done( function (d1) {
    let headers = [];
    let showColumns = d1.must_show_osnames.length;
    if (showColumns < maxShowColumns) { showColumns = maxShowColumns }
    let rowsHtml=`<td></td>`;
    d1.must_show_osnames.forEach( function(os) {
      headers.push( {
         osname: os.osname,
      });
      rowsHtml+= `<td><a style="font-weight: bold;" href="/list?dist=[% dist_name | url %]&os=${encodeURIComponent(os.osname)}">${os.osname}</a></td>`;
    });
    d1.osnames.forEach( function(os) {
      if ( headers.find(o => o.osname === os.osname) ) { return; } // Already have this one.
      headers.push( {
         osname: os.osname,
      });
      rowsHtml += `<td><a style="font-weight: bold;" href="/list?dist=[% dist_name | url %]&os=${encodeURIComponent(os.osname)}">${os.osname}</a></td>`;
    });
    rowsHtml += "</td>";
    d1.perl_versions.forEach ( function(pv) {
      let markup = `<tr><td><a style="font-weight: bold;" href="/list?dist=[% dist_name | url %]&vers=${encodeURIComponent(pv.perl_version)}">${pv.perl_version}</a></td>`;
      headers.forEach ( function(os) {
         let found = d1.tests.find( o => (o.osname === os.osname && o.perl_version === pv.perl_version) );
         if (!found ) { markup += `<td></td>`; return; }
         let bgcolor = "green";
         let fgcolor = "white";
         let plural = "tests";
         let resultText = `${+found.count_pass} PASS`;
         if ( found.count_unknown ) { bgcolor="purple"; fgcolor="white"; resultText += `, ${+found.count_unknown} UNKNOWN` }
         if ( found.count_na )      { bgcolor=  "pink"; fgcolor="black"; resultText += `, ${+found.count_na} NA` }
         if ( found.count_fail )    { bgcolor=  "red";  fgcolor="white"; resultText += `, ${+found.count_fail} FAIL` }
         if ( found.count_total === 1 ) { plural = "test" }
         markup += `<td>
           <a href="/list?dist=[% dist_name | url %]&vers=${encodeURIComponent(pv.perl_version)}&os=${encodeURIComponent(os.osname)}">
           <div title="${resultText}"
                class="pie-chart-icon" 
                data-pass="${found.count_pass}"
                data-fail="${found.count_fail}"
                data-na="${found.count_na}"
                data-unknown="${found.count_unknown}"
                data-total="${found.count_total}"></div>
           <span style="background-color: ${bgcolor}; color: ${fgcolor};">${found.count_total} ${plural}</span></a></td>`;
      });
      rowsHtml += markup;
    });
    $("#myChart").html(`<table>${rowsHtml}</table>`);
    resetPieCharts();
  });
});

function resetPieCharts() {
  const pieCharts = document.querySelectorAll(".pie-chart-icon");
  pieCharts.forEach(pieChart => {
    const passPct = (+pieChart.getAttribute("data-pass") || 0)    /  pieChart.getAttribute("data-total");
    const failPct = (+pieChart.getAttribute("data-fail") || 0)    /  pieChart.getAttribute("data-total");
    const naPct   = (+pieChart.getAttribute("data-na") || 0)      /  pieChart.getAttribute("data-total");
    const unkPct  = (+pieChart.getAttribute("data-unknown") || 0) /  pieChart.getAttribute("data-total");
    const bgcolor = "lightgray";
    pieChart.style.background = `conic-gradient(
      green 0% ${passPct*100}%, 
      red ${passPct*100}% ${(passPct+failPct)*100}%,
      pink ${(passPct+failPct)*100}% ${(passPct+failPct+naPct)*100}%,
      black ${(passPct+failPct+naPct)*100}% 100%
      )`;
  });
}
</script>